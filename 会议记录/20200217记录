
Memory Management

用 array 作为一个内存
linux的一些功能，文件的写入写出，
只是模仿操作系统的一部分来写
最需要保留的

CPU调度，UI，网络，文件系统管理
从这几个角度来考虑
windows linux android 

Windows 只有在使用的时候才会调用
linux 会尽量利用所有的内存，将硬件发挥到最大
android 使用Java写的，每次运行的时候会自动启动一个虚拟机



安全锥

每个功能是一个 class 来
运行内存【单独划出来的内存】，本地内存【原有的文件储存的地方】
并行计算？顺序计算？
分轮转算法【谁先做完谁出去】
多进程

用2D模拟内存，然后调动和



进程（老范）

文件的不同状态，process，就是我们写的程序，在运行的时候叫做process。
有很多process需要处理的时候，就变成了test model了

我们没有CPU这个部分，我们新建一个process，
如果需要准备，放在序列里面
如果在io里面，就放在一个新的序列里面
如果需要运行，放在内存里面

对于代码的管理  
储存代码，储存数据，储存process的操作，local variable（版本变量）



王峻强

整理了15个相对主流的，UI是都可以，模仿各种形态的GUI，
scheduling，
目标是一个多进程运行的程序，
从0开始写一个UI是比较困难的，可以借用QT来完成

模仿什么样子的UI，想要做成什么样子的UI



泽伟（未来）
功能的效率怎么体验出来
scheduling 里面有相关的指标
有一些时间，

异常处理的部分，

系统调用(System call)： 应用程序向操作系统发出请求
异常 (exception)：来源于不良的应用程序 （比如：内存出错，程序代码运行错误，除以零）
中断（interrupt）：来源于外部设备 （硬件设备和网络的中断，网卡，声卡）

预想到可能会发生什么异常，因为OS使我们模拟的，
【网络中断，键盘失灵？】针对几个特定的异常进行处理。
【留的运行内存是多少，内存不够，系统自动进行处理】
针对黑客的攻击，加密算法
提供用户手册，写个说明书



创建一个数组来模拟内存
钟表，计算器，文件储存，修改


